
```json
{
    "codigo": "import pandas as pd\nimport numpy as np\nimport yfinance as yf\nimport matplotlib.pyplot as plt\nimport datetime\n\nclass SolanaAnalyzer:\n    def __init__(self, symbol='SOL-USD'):\n        \"\"\"Inicializa o analisador com o símbolo da criptomoeda.\"\"\"\n        self.symbol = symbol\n        self.data = None\n\n    def collect_data(self, start_date='2020-01-01'):\n        \"\"\"Coleta dados históricos de preços e volumes da Solana.\"\"\"\n        try:\n            self.data = yf.download(self.symbol, start=start_date)\n            if self.data.empty:\n                raise ValueError(\"Nenhum dado encontrado. Verifique o símbolo ou a data.\")\n            print(\"Dados coletados com sucesso.\")\n        except Exception as e:\n            print(f\"Erro ao coletar dados: {e}\")\n\n    def calculate_indicators(self):\n        \"\"\"Calcula indicadores técnicos: MA, RSI, MACD, Bandas de Bollinger e Estocástico.\"\"\"\n        if self.data is None:\n            raise Exception(\"Dados não carregados. Execute collect_data primeiro.\")\n\n        self.calculate_moving_average()\n        self.calculate_rsi()\n        self.calculate_bollinger_bands()\n        self.calculate_macd()\n        self.calculate_stochastic()\n\n        print(\"Indicadores calculados com sucesso.\")\n\n    def calculate_moving_average(self, window=20):\n        \"\"\"Calcula a Média Móvel.\"\"\"\n        self.data['MA20'] = self.data['Close'].rolling(window=window).mean()\n\n    def calculate_rsi(self, window=14):\n        \"\"\"Calcula o Índice de Força Relativa (RSI).\"\"\"\n        delta = self.data['Close'].diff()\n        gain = (delta.where(delta > 0, 0)).rolling(window=window).mean()\n        loss = (-delta.where(delta < 0, 0)).rolling(window=window).mean()\n        rs = gain / loss\n        self.data['RSI'] = 100 - (100 / (1 + rs))\n\n    def calculate_bollinger_bands(self):\n        \"\"\"Calcula as Bandas de Bollinger.\"\"\"\n        self.data['20 Std'] = self.data['Close'].rolling(window=20).std()\n        self.data['Upper Band'] = self.data['MA20'] + (self.data['20 Std'] * 2)\n        self.data['Lower Band'] = self.data['MA20'] - (self.data['20 Std'] * 2)\n\n    def calculate_macd(self):\n        \"\"\"Calcula o MACD.\"\"\"\n        self.data['EMA12'] = self.data['Close'].ewm(span=12, adjust=False).mean()\n        self.data['EMA26'] = self.data['Close'].ewm(span=26, adjust=False).mean()\n        self.data['MACD'] = self.data['EMA12'] - self.data['EMA26']\n        self.data['Signal Line'] = self.data['MACD'].ewm(span=9, adjust=False).mean()\n\n    def calculate_stochastic(self, window=14):\n        \"\"\"Calcula o Estocástico.\"\"\"\n        min_low = self.data['Close'].rolling(window=window).min()\n        max_high = self.data['Close'].rolling(window=window).max()\n        self.data['Stochastic'] = 100 * (self.data['Close'] - min_low) / (max_high - min_low)\n\n    def plot_data(self):\n        \"\"\"Gera gráficos para visualização das tendências de preço e indicadores.\"\"\"\n        if self.data is None:\n            raise Exception(\"Dados não carregados. Execute collect_data primeiro.\")\n\n        plt.figure(figsize=(14, 12))\n\n        # Gráfico dos preços e Bandas de Bollinger\n        plt.subplot(4, 1, 1)\n        plt.plot(self.data[['Close', 'MA20', 'Upper Band', 'Lower Band']])\n        plt.title('Preço da Solana e Bandas de Bollinger')\n        plt.legend(['Preço', 'MA20', 'Banda Superior', 'Banda Inferior'])\n\n        # Gráfico do RSI\n        plt.subplot(4, 1, 2)\n        plt.plot(self.data['RSI'], label='RSI', color='orange')\n        plt.title('Índice de Força Relativa (RSI)')\n        plt.axhline(70, linestyle='--', alpha=0.5, color='red')\n        plt.axhline(30, linestyle='--', alpha=0.5, color='green')\n        plt.legend()\n\n        # Gráfico do MACD\n        plt.subplot(4, 1, 3)\n        plt.plot(self.data['MACD'], label='MACD', color='blue')\n        plt.plot(self.data['Signal Line'], label='Signal Line', color='red')\n        plt.title('MACD')\n        plt.legend()\n\n        # Gráfico do Estocástico\n        plt.subplot(4, 1, 4)\n        plt.plot(self.data['Stochastic'], label='Estocástico', color='purple')\n        plt.axhline(80, linestyle='--', alpha=0.5, color='red')\n        plt.axhline(20, linestyle='--', alpha=0.5, color='green')\n        plt.title('Estocástico')\n        plt.legend()\n\n        plt.tight_layout()\n        plt.show()\n\n    def alert_system(self):\n        \"\"\"Configura alertas para condições específicas do mercado.\"\"\"\n        if self.data is None:\n            raise Exception(\"Dados não carregados. Execute collect_data primeiro.\")\n\n        last_ma = self.data['MA20'].iloc[-1]\n        last_price = self.data['Close'].iloc[-1]\n        last_rsi = self.data['RSI'].iloc[-1]\n        last_stochastic = self.data['Stochastic'].iloc[-1]\n\n        # Alertas para cruzamentos de média\n        if last_price > last_ma:\n            print(f\"Aviso: O preço ({last_price:.2f}) cruzou acima da MA de 20 dias ({last_ma:.2f}). Considere comprar.\")\n        elif last_price < last_ma:\n            print(f\"Aviso: O preço ({last_price:.2f}) cruzou abaixo da MA de 20 dias ({last_ma:.2f}). Considere vender.\")\n\n        # Alertas para o RSI\n        if last_rsi > 70:\n            print(f\"Aviso: O RSI está alto ({last_rsi:.2f}). Considere realizar vendas.\")\n        elif last_rsi < 30:\n            print(f\"Aviso: O RSI está baixo ({last_rsi:.2f}). Considere realizar compras.\")\n\n        # Alertas para o Estocástico\n        if last_stochastic > 80:\n            print(f\"Aviso: O Estocástico está alto ({last_stochastic:.2f}). Considere realizar vendas.\")\n        elif last_stochastic < 20:\n            print(f\"Aviso: O Estocástico está baixo ({last_stochastic:.2f}). Considere realizar compras.\")\n\n    def save_analysis_report(self, filename='solana_analysis_report.txt'):\n        \"\"\"Salva um relatório da análise em um arquivo texto.\"\"\"\n        if self.data is None:\n            raise Exception(\"Dados não carregados. Execute collect_data primeiro.\")\n\n        with open(filename, 'w') as file:\n            file.write(f\"Análise para {self.symbol} em {self.data.index[-1].date()}\n\")\n            file.write(f\"Preço atual: {self.data['Close'].iloc[-1]:.2f}\n\")\n            file.write(f\"MA20: {self.data['MA20'].iloc[-1]:.2f}\n\")\n            file.write(f\"RSI: {self.data['RSI'].iloc[-1]:.2f}\n\")\n            file.write(f\"MACD: {self.data['MACD'].iloc[-1]:.2f}\n\")\n            file.write(f\"Estocástico: {self.data['Stochastic'].iloc[-1]:.2f}\n\")\n            file.write(f\"Alertas:\n\")\n            last_ma = self.data['MA20'].iloc[-1]\n            last_price = self.data['Close'].iloc[-1]\n            last_rsi = self.data['RSI'].iloc[-1]\n            last_stochastic = self.data['Stochastic'].iloc[-1]\n            \n            # Alertas para cruzamentos de média\n            if last_price > last_ma:\n                file.write(f\"O preço ({last_price:.2f}) cruzou acima da MA de 20 dias ({last_ma:.2f}).\n\")\n            elif last_price < last_ma:\n                file.write(f\"O preço ({last_price:.2f}) cruzou abaixo da MA de 20 dias ({last_ma:.2f}).\n\")\n\n            # Alertas para o RSI\n            if last_rsi > 70:\n                file.write(f\"O RSI está alto ({last_rsi:.2f}).\n\")\n            elif last_rsi < 30:\n                file.write(f\"O RSI está baixo ({last_rsi:.2f}).\n\")\n\n            # Alertas para o Estocástico\n            if last_stochastic > 80:\n                file.write(f\"O Estocástico está alto ({last_stochastic:.2f}).\n\")\n            elif last_stochastic < 20:\n                file.write(f\"O Estocástico está baixo ({last_stochastic:.2f}).\n\")\n\n        print(f\"Relatório salvo em '{filename}'.\")\n\n    def set_alert_thresholds(self, rsi_high=70, rsi_low=30, stochastic_high=80, stochastic_low=20):\n        \"\"\"Permite ao usuário configurar limites personalizados para alertas de RSI e Estocástico.\"\"\"\n        self.rsi_high = rsi_high\n        self.rsi_low = rsi_low\n        self.stochastic_high = stochastic_high\n        self.stochastic_low = stochastic_low\n\nif __name__ == '__main__':\n    try:\n        analyzer = SolanaAnalyzer()\n        analyzer.collect_data()\n        analyzer.calculate_indicators()\n        analyzer.plot_data()\n        analyzer.alert_system()\n        analyzer.save_analysis_report()\n    except Exception as e:\n        print(f\"Ocorreu um erro: {e}\")"
}
```